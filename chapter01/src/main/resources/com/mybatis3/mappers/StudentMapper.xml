<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.mybatis3.mappers.StudentMapper">
	
	<resultMap type="Student" id="StudentResult">
		<id 	property="studId" column="stud_id"/>
		<result property="name" column="name"/>
		<result property="email" column="email"/>
		<result property="dob" column="dob"/>
	</resultMap>
  
  	<!--<select id="findAllStudents" resultMap="StudentResult">-->
    	<!--select * from Students-->
  	<!--</select>-->
    <select id="findAllStudents" resultMap="StudentResult">
        SELECT * FROM Students
    </select>

    <!--利用mybatis-config.xml 的配置，可以不用输入类的全路径而自动对应-->
    <!--在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。 比如 domain.blog.Author 的别名为 author；若有注解，则别名为其注解值。-->
    <!--这种情况下,MyBatis 会在幕后自动创建一个 ResultMap,基于属性名来映射列到 JavaBean 的属性上。如果列名没有精确匹配,你可以在列名上使用 select 字句的别名(一个 基本的 SQL 特性)来匹配标签。-->
  	<select id="findStudentById" parameterType="int" resultType="Student">
    	select stud_id as studId, name, email, dob from Students where stud_id=#{studId}
  	</select>
  	
  	<insert id="insertStudent" parameterType="Student">
  		INSERT INTO STUDENTS(STUD_ID,NAME,EMAIL,DOB) VALUES(#{studId},#{name},#{email},#{dob})
  	</insert>
  	
  	<update id="updateStudent" parameterType="Student">
  		UPDATE STUDENTS SET NAME=#{name}, EMAIL=#{email}, DOB=#{dob} WHERE STUD_ID=#{studId}
  	</update>
  	
</mapper>